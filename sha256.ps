%!PS

%for debugging purposes
/Times-Roman findfont
15 scalefont
setfont

%helper function to concat a string together
/concatstrings % (a) (b) -> (ab)  
{ exch dup length    
 2 index length add string    
 dup dup 4 2 roll copy length
 4 -1 roll putinterval
} bind def  


%values defined by SHA256
/K [1116352408 1899447441 3049323471 3921009573 961987163 1508970993 2453635748 2870763221 3624381080 310598401 607225278 1426881987 
1925078388 2162078206 2614888103 3248222580 3835390401 4022224774 264347078 604807628 770255983 1249150122 1555081692 1996064986 
2554220882 2821834349 2952996808 3210313671 3336571891 3584528711 113926993 338241895 666307205 773529912 1294757372 1396182291 
1695183700 1986661051 2177026350 2456956037 2730485921 2820302411 3259730800 3345764771 3516065817 3600352804 4094571909 275423344 
430227734 506948616 659060556 883997877 958139571 1322822218 1537002063 1747873779 1955562222 2024104815 2227730452 2361852424 2428436474 
2756734187 3204031479 3329325298] def

/LIMIT 4294967295 def %0xffffffff


%initial SHA256 values
/H [1779033703 3144134277 1013904242 2773480762 1359893119 2600822924 528734635 1541459225] def

%rotate the bits right
% (x >> n) | (x << (32-n))
%usage <variable> <amount>
/rotr { 
  2 copy %make a copy of the args
  -1 mul %for left bit shift = -<amount>
  bitshift %stack layout: (x >> n) n x
  exch %n (x >> n) x
  32 exch sub %(32-n) (x >> n) x
  2 index exch
  bitshift %(x << (32-n)) (x >> n)
  or exch pop
} def

%Ch function defined in the SHA2 Algo
%(x & y) ^ (~x & z)
%usage <x> <y> <z>
/Ch {
  2 index 2 index %y x z y x
  and %(x & y) z y x
  3 index not 2 index and xor
  count 1 roll
  pop pop pop
} def

%Maj function defined in the SHA2 Algo
%(x & y) ^ (x & z) ^ (y & z)
%usage <x> <y> <z>
/Maj {
  2 index 2 index and %(x & y)
  3 index 2 index and %(x & z)
  3 index 3 index and %(y & z)
  xor xor %answer
  count 1 roll
  pop pop pop
} def

%function defined in the SHA2 Algo
% rotr(x, 2) ^ rotr(x, 13) ^ rotr(x, 22)
% usage <x>
/SIGMA0 {
  dup 2 rotr %rotr(x, 2)
  1 index 13 rotr %rotr(x, 13)
  2 index 22 rotr
  xor xor exch pop
} def

%function defined in the SHA2 Algo
% rotr(x, 6) ^ rotr(x, 11) ^ rotr(x, 25)
% usage <x>
/SIGMA1 {
  dup 6 rotr
  1 index 11 rotr
  2 index 25 rotr
  xor xor exch pop
} def

%function defined in the SHA2 Algo
% rotr(x, 7) ^ rotr(x, 18) ^ (x >> 3)
% usage <x>
/sigma0 {
  dup 7 rotr
  1 index 18 rotr
  2 index -3 bitshift
  xor xor exch pop
} def

%function defined in the SHA2 Algo
% rotr(x, 17) ^ rotr(x, 19) ^ (x >> 10)
% usage <x>
/sigma1 {
  dup 17 rotr
  1 index 19 rotr
  2 index -10 bitshift
  xor xor exch pop
} def

/add_o {
	% add the 30 lsb
	1 index
	16#3fffffff and
	1 index
	16#3fffffff and
	add

	% take the carry of that
	0 index
	-30 bitshift

	% add the 2 msb
	3 index
	-30 bitshift
	3 index
	-30 bitshift
	add
	add
	30 bitshift

	1 index
	16#3fffffff and

	or
	exch pop exch pop exch pop
} def


/sha256 {

  %%%%%%%%%%%%%%%%%%
  %% PREPROCESSING (complete)
  %%%%%%%%%%%%%%%%%%

  %first need to append 0x80 to input (I think € = 0x80, but could be wrong)
  (€) concatstrings % ok
  
  /input exch def % ok
  /l input length 4 div 2 add cvi def % ok
  /N l 16 div ceiling cvi def % ok
  /M N array def % ok
  
  
  %%%%%%%%%%%%%%%%%%%%%%%
  %% MESSAGE FORMATTING (complete)
  %%%%%%%%%%%%%%%%%%%%%%%
  
  /i 0 def % ok
  1 1 N { % ok
    M i 16 array put % ok
    /j 0 def % ok
    0 1 15 { % ok
      /offset i 64 mul j 4 mul add def % ok
      offset 3 add input length lt { % ok
      /o24 input offset get 24 bitshift def % ok
      /o16 input offset 1 add get 16 bitshift def % ok
      /o8 input offset 2 add get 8 bitshift def % ok
      /o input offset 3 add get def % ok
      /final o24 o16 or o8 or o or def % ok
      M i get j final put % ok
      } { M i get j 0 put } ifelse % ok
      /j j 1 add def % ok
    } for % ok
    /i i 1 add def % ok
  } for % ok
  
  %/sig_bits input length 1 sub 8 mul LIMIT div def % ok
  /sig_bits 0 def%sig_bits floor cvi def % ok
  /less_bits input length 1 sub 8 mul def % ok
  
  M N 1 sub get 14 sig_bits cvi put % ok
  M N 1 sub get 15 less_bits cvi 16#FFFFFFFF and put % ok
  
  0 660 moveto
  M 0 get 0 get 20 string cvs show
  
  %%%%%%%%%%%%%%%%%%%%%
  %% HASH COMPUTATION
  %%%%%%%%%%%%%%%%%%%%%
  
  /W 64 array def % ok
  /a 0 def % ok
  /b 0 def % ok
  /c 0 def % ok
  /d 0 def % ok
  /e 0 def % ok
  /f 0 def % ok
  /g 0 def % ok
  /h 0 def % ok
  
  /i 0 def % ok
  1 1 N {  % ok
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    %% PREPARE MESSAGE SCHEDULE (complete)
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    
    /t 0 def % ok
    0 1 15 { % ok
      W t M i get t get put % ok
      /t t 1 add def % ok
    } for % ok
    
    % W[t] = (Sha256.sigma1(W[t-2]) + W[t-7] + Sha256.sigma0(W[t-15])+ W[t-16]) & 0xffffffff;
    /t 16 def % ok
    16 1 63 { % ok
      %this next statement has integer overflow
      /val W t 2 sub get sigma1 W t 7 sub get add_o W t 15 sub get sigma0 add_o W t 16 sub get add_o def
      W t val put
      /t t 1 add def % ok
    } for % ok
    
    %%%%%%%%%%%%%%%%%%%%%%%%
    %% INIT HASH VARIABLES (complete)
    %%%%%%%%%%%%%%%%%%%%%%%%
    
    /a H 0 get def
    /b H 1 get def
    /c H 2 get def
    /d H 3 get def
    /e H 4 get def
    /f H 5 get def
    /g H 6 get def
    /h H 7 get def
    
    %%%%%%%%%%%%%%
    %% MAIN LOOP (complete)
    %%%%%%%%%%%%%%
    
    /t 0 def
    
    0 1 63 {
      %T1 = h + Sha256.Sigma1(e) + Sha256.Ch(e, f, g) + K[t] + W[t];
      /T1 h e SIGMA1 add_o e f g Ch add_o K t get add_o W t get add_o def
      %T2 = Sha256.Sigma0(a) + Sha256.Maj(a, b, c);
      /T2 a SIGMA0 a b c Maj add_o def
      /h g def
      /g f def
      /f e def
      /e d T1 add_o def
      /d c def
      /c b def
      /b a def
      /a T1 T2 add_o def
      
      /t t 1 add def
    } for    
    
    %%%%%%%%%%%%%%%%%%%%%
    %% COMPUTE NEW HASH (complete)
    %%%%%%%%%%%%%%%%%%%%%
    
    %h[i] = (h[i]+[a-h]) & 0xffffffff;
    H 0 get a add_o
    H exch 0 exch put
    
    H 1 get b add_o
    H exch 1 exch put
    
    H 2 get c add_o
    H exch 2 exch put
    
    H 3 get d add_o
    H exch 3 exch put
    
    H 4 get e add_o
    H exch 4 exch put
    
    H 5 get f add_o
    H exch 5 exch put
    
    H 6 get g add_o
    H exch 6 exch put
    
    H 7 get h add_o
    H exch 7 exch put
    
    /i i 1 add def
  } for
} def

(abc) sha256

showpage
