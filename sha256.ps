%!PS

%for debugging purposes
/Times-Roman findfont
15 scalefont
setfont

%helper function to concat a string together
/concatstrings % (a) (b) -> (ab)  
{ exch dup length    
 2 index length add string    
 dup dup 4 2 roll copy length
 4 -1 roll putinterval
} bind def  


%values defined by SHA256
/K [1116352408 1899447441 -1245643825 -373957723 961987163 1508970993 -1841331548 -1424204075 -670586216 310598401 607225278 1426881987 1925078388 -2132889090 -1680079193 
-1046744716 -459576895 -272742522 264347078 604807628 770255983 1249150122 1555081692 1996064986 -1740746414 -1473132947 -1341970488 -1084653625 -958395405 -710438585 
113926993 338241895 666307205 773529912 1294757372 1396182291 1695183700 1986661051 -2117940946 -1838011259 -1564481375 -1474664885 -1035236496 -949202525 -778901479 -694614492 
-200395387 275423344 430227734 506948616 659060556 883997877 958139571 1322822218 1537002063 1747873779 1955562222 2024104815 -2067236844 -1933114872 -1866530822 -1538233109 
-1090935817 -965641998] def

/LIMIT 4294967295 def %0xffffffff

%rotate the bits right
% (x >> n) | (x << (32-n))
%usage <variable> <amount>
/rotr { 
  2 copy %make a copy of the args
  -1 mul %for left bit shift = -<amount>
  bitshift %stack layout: (x >> n) n x
  exch %n (x >> n) x
  32 exch sub %(32-n) (x >> n) x
  2 index exch
  bitshift %(x << (32-n)) (x >> n)
  or exch pop
} def

%Ch function defined in the SHA2 Algo
%(x & y) ^ (~x & z)
%usage <x> <y> <z>
/Ch {
  2 index 2 index %y x z y x
  and %(x & y) z y x
  3 index not 2 index and xor
  exch pop exch pop exch pop 
} def

%Maj function defined in the SHA2 Algo
%(x & y) ^ (x & z) ^ (y & z)
%usage <x> <y> <z>
/Maj {
  2 index 2 index and %(x & y)
  3 index 2 index and %(x & z)
  3 index 3 index and %(y & z)
  xor xor %answer
  exch pop exch pop exch pop 
} def

%function defined in the SHA2 Algo
% rotr(x, 2) ^ rotr(x, 13) ^ rotr(x, 22)
% usage <x>
/SIGMA0 {
  dup 2 rotr %rotr(x, 2)
  1 index 13 rotr %rotr(x, 13)
  2 index 22 rotr
  xor xor exch pop
} def

%function defined in the SHA2 Algo
% rotr(x, 6) ^ rotr(x, 11) ^ rotr(x, 25)
% usage <x>
/SIGMA1 {
  dup 6 rotr
  1 index 11 rotr
  2 index 25 rotr
  xor xor exch pop
} def

%function defined in the SHA2 Algo
% rotr(x, 7) ^ rotr(x, 18) ^ (x >> 3)
% usage <x>
/sigma0 {
  dup 7 rotr
  1 index 18 rotr
  2 index -3 bitshift
  xor xor exch pop
} def

%function defined in the SHA2 Algo
% rotr(x, 17) ^ rotr(x, 19) ^ (x >> 10)
% usage <x>
/sigma1 {
  dup 17 rotr
  1 index 19 rotr
  2 index -10 bitshift
  xor xor exch pop
} def

/add_o {
	% add the 30 lsb
	1 index
	16#3fffffff and
	1 index
	16#3fffffff and
	add

	% take the carry of that
	0 index
	-30 bitshift

	% add the 2 msb
	3 index
	-30 bitshift
	3 index
	-30 bitshift
	add
	add
	30 bitshift

	1 index
	16#3fffffff and

	or
	exch pop exch pop exch pop
} def


/sha256 {

  %%%%%%%%%%%%%%%%%%
  %% PREPROCESSING (complete)
  %%%%%%%%%%%%%%%%%%
  
  %initial SHA256 values
  /H [1779033703 -1150833019 1013904242 -1521486534 1359893119 -1694144372 528734635 1541459225] def

  %first need to append 0x80 to input (I think € = 0x80, but could be wrong)
  %(€) concatstrings % ok
  (a) concatstrings
  /input exch def % ok
  clear
  input input length 1 sub 128 put
  /l input length 4 div 2 add cvi def % ok
  /N l 16 div ceiling cvi def % ok
  /M N array def % ok
  
  
  %%%%%%%%%%%%%%%%%%%%%%%
  %% MESSAGE FORMATTING (complete)
  %%%%%%%%%%%%%%%%%%%%%%%
  
  /i 0 def % ok
  1 1 N { % ok
    pop
    M i 16 array put % ok
    /j 0 def % ok
    0 1 15 { % ok
      pop
      /offset i 64 mul j 4 mul add def % ok
      /o24 0 def
      /o16 0 def
      /o8 0 def
      /o 0 def
      offset input length lt {
         /o24 input offset get 24 bitshift def % ok
      } if
      offset 1 add input length lt {
        /o16 input offset 1 add get 16 bitshift def % ok
      } if
      offset 2 add input length lt {
        /o8 input offset 2 add get 8 bitshift def % ok
      } if
      offset 3 add input length lt { % ok
        /o input offset 3 add get def % ok
      } if % ok
      /final o24 o16 or o8 or o or def % ok
      M i get j final put % ok
      /j j 1 add def % ok
    } for % ok
    /i i 1 add def % ok
  } for % ok
  
  %/sig_bits input length 1 sub 8 mul LIMIT div def % ok
  /sig_bits 0 def % ok
  /less_bits input length 1 sub 8 mul def % ok
  
  M N 1 sub get 14 sig_bits cvi put % ok
  M N 1 sub get 15 less_bits cvi 16#FFFFFFFF and put % ok
  
  %%%%%%%%%%%%%%%%%%%%%
  %% HASH COMPUTATION
  %%%%%%%%%%%%%%%%%%%%%
  
  /W 64 array def % ok
  /a 0 def % ok
  /b 0 def % ok
  /c 0 def % ok
  /d 0 def % ok
  /e 0 def % ok
  /f 0 def % ok
  /g 0 def % ok
  /h 0 def % ok
  
  /i 0 def % ok
  1 1 N {  % ok
    pop
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    %% PREPARE MESSAGE SCHEDULE (complete)
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    
    /t 0 def % ok
    0 1 15 { % ok
      pop
      W t M i get t get put % ok
      /t t 1 add def % ok
    } for % ok
    
    % W[t] = (Sha256.sigma1(W[t-2]) + W[t-7] + Sha256.sigma0(W[t-15])+ W[t-16]) & 0xffffffff;
    /t 16 def % ok
    16 1 63 { % ok
      pop
      %this next statement has integer overflow
      /val W t 2 sub get sigma1 W t 7 sub get add_o W t 15 sub get sigma0 add_o W t 16 sub get add_o def
      W t val put
      /t t 1 add def % ok
    } for % ok
    
    %%%%%%%%%%%%%%%%%%%%%%%%
    %% INIT HASH VARIABLES (complete)
    %%%%%%%%%%%%%%%%%%%%%%%%
    
    /a H 0 get def
    /b H 1 get def
    /c H 2 get def
    /d H 3 get def
    /e H 4 get def
    /f H 5 get def
    /g H 6 get def
    /h H 7 get def
    
    %%%%%%%%%%%%%%
    %% MAIN LOOP (complete)
    %%%%%%%%%%%%%%
    
    /t 0 def
    0 1 63 {
      pop
      %T1 = h + Sha256.Sigma1(e) + Sha256.Ch(e, f, g) + K[t] + W[t];
      h e SIGMA1 add_o e f g Ch add_o K t get add_o W t get add_o
      /T1 exch def
      %T2 = Sha256.Sigma0(a) + Sha256.Maj(a, b, c);
      a SIGMA0 a b c Maj add_o
      /T2 exch def
      /h g def
      /g f def
      /f e def
      /e d T1 add_o def
      /d c def
      /c b def
      /b a def
      /a T1 T2 add_o def
      
      /t t 1 add def
    } for    
    
    %%%%%%%%%%%%%%%%%%%%%
    %% COMPUTE NEW HASH (complete)
    %%%%%%%%%%%%%%%%%%%%%
    
    %h[i] = (h[i]+[a-h]) & 0xffffffff;
    
    H 0 H 0 get a add_o put
    H 1 H 1 get b add_o put
    H 2 H 2 get c add_o put
    H 3 H 3 get d add_o put
    H 4 H 4 get e add_o put
    H 5 H 5 get f add_o put
    H 6 H 6 get g add_o put
    H 7 H 7 get h add_o put
    
    /i i 1 add def
  } for
  
  %put hash output onto the stack
  /t 7 def
  0 1 7 {
    pop
    H t get
    /t t 1 sub def
  } for
  
  %print to the page
  
} def


%%OPTIMIZATION CODE:
/sha256_optimized {
  /H [1779033703 -1150833019 1013904242 -1521486534 1359893119 -1694144372 528734635 1541459225] def
  (a) exch dup length    
  2 index length add string    
  dup dup 4 2 roll copy length
  4 -1 roll putinterval dup dup % ok
  length 1 sub 128 put
  dup length 4 div 2 add cvi % ok
  dup 16 div ceiling cvi dup % ok
  /M exch array def % ok
  
  %%%%stack format at this point:
  %% N
  %% l
  %% input
  %%%%%
  
  %%%%%%%%%%%%%%%%%%%%%%%
  %% MESSAGE FORMATTING (complete)
  %%%%%%%%%%%%%%%%%%%%%%%
  
  0 1 2 index 1 sub { % ok
    %%%%stack format at this point:
    %% i
    %% N
    %% l
    %% input
    %%%%%
    M 1 index 16 array put
    0 1 15 {
      %% j
      %% i
      %% N
      %% l
      %% input
      
      %push the offset down
      1 index 64 mul 1 index 4 mul add
      
      %offset
      %j
      %i
      %N
      %l
      %input
      
      dup 6 index length lt {
        %/o24 input offset get 24 bitshift def
        5 index 1 index get 24 bitshift
      } {
        0
      } ifelse
      
      %o24
      %offset
      %j
      %i
      %N
      %l
      %input
      
      1 index 1 add 7 index length lt {
        %/o16 input offset 1 add get 16 bitshift def
        6 index 2 index 1 add get 16 bitshift
      } {
        0
      } ifelse
      
      %o16
      %o24
      %offset
      %j
      %i
      %N
      %l
      %input
      
      2 index 2 add 8 index length lt {
        %/o8 input offset 2 add get 8 bitshift def
        7 index 3 index 2 add get 8 bitshift
      } {
        0
      } ifelse
      
      %o8
      %o16
      %o24
      %offset
      %j
      %i
      %N
      %l
      %input
      
      3 index 3 add 9 index length lt {
        %/o input offset 3 add get def
        8 index 4 index 3 add get
      } {
        0
      } ifelse
      
      %o
      %o8
      %o16
      %o24
      %offset
      %j
      %i
      %N
      %l
      %input
      
      or or or
      
      %final
      %offset
      %j
      %i
      %N
      %l
      %input
      
      M 4 index get 3 index 2 index put
      pop pop pop
    } for
    pop
  } for
  
  %N
  %l
  %input
  
  M 1 index 1 sub get 14 0 cvi put
  
  2 index length 1 sub 8 mul
  
  %less_bits
  %N
  %l
  %input
  M 2 index 1 sub get 15 2 index cvi 16#FFFFFFFF and put
  pop
  
  %N
  %l
  %input
  
  /W 64 array def
  
  0 1 2 index 1 sub {
    %i
    %N
    %l
    %input
    0 1 15 {
      %j
      %i
      %N
      %l
      %input
      W 1 index M 4 index get 3 index get put
      pop
    } for
    16 1 63 {
      %t
      %i
      %N
      %l
      %input
      W 1 index 2 sub get sigma1 %push sigma(W[t-2])
      W 2 index 7 sub get %push W[t-7]
      add_o
      
      %sigma(W[t-2]) + W[t-7]
      %t
      %i
      %N
      %l
      %input
      
      W 2 index 15 sub get sigma0
      W 3 index 16 sub get
      add_o add_o
      W 2 index 2 index put
      pop pop
    } for
    /temp 8 array def
    H temp copy pop
    0 1 63 {
      temp 7 get temp 4 get SIGMA1 add_o
      temp 4 get temp 5 get temp 6 get Ch add_o
      K 2 index get add_o
      W 2 index get add_o
      
      temp 0 get SIGMA0 temp 0 get temp 1 get temp 2 get Maj add_o
      
      %T2
      %T1
      %j
      %i
      %N a=0 b=1 c=2 d=3 e=4 f=5 g=6 h=7
      %l
      %input
      
      temp 7 temp 6 get put
      temp 6 temp 5 get put
      temp 5 temp 4 get put
      temp 4 temp 3 get 4 index add_o put
      temp 3 temp 2 get put
      temp 2 temp 1 get put
      temp 1 temp 0 get put
      add_o temp 0 2 index put
      pop pop
    } for
    
    
    
    %%%%%%%%%%%%%%%%%%%%%
    %% COMPUTE NEW HASH (complete)
    %%%%%%%%%%%%%%%%%%%%%
    
    %h[i] = (h[i]+[a-h]) & 0xffffffff;
    
    H 0 H 0 get temp 0 get add_o put
    H 1 H 1 get temp 1 get add_o put
    H 2 H 2 get temp 2 get add_o put
    H 3 H 3 get temp 3 get add_o put
    H 4 H 4 get temp 4 get add_o put
    H 5 H 5 get temp 5 get add_o put
    H 6 H 6 get temp 6 get add_o put
    H 7 H 7 get temp 7 get add_o put
  } for
  
  %put hash output onto the stack
  /t 7 def
  0 1 7 {
    pop
    H t get
    /t t 1 sub def
  } for
  
} def  
0 1 9999 {
  clear
  (abc) sha256
} for

%usage: <number> convert_bin_to_string
%result: string of 4  char bytes
/convert_bin_to_string {
  /input exch def
  %first byte
  /byte1 input -24 bitshift def
  %second byte
  /byte2 input 8 bitshift -24 bitshift def
  %third byte
  /byte3 input 16 bitshift -24 bitshift def
  %fourth byte
  /byte4 input 24 bitshift -24 bitshift def
  /ret (1234) def
  ret 0 byte1 put
  ret 1 byte2 put
  ret 2 byte3 put
  ret 3 byte4 put
  ret
} def

%mining algorithm is as follows:
%construct a block header of 80bytes, where the last 4 bytes are a nonce value that constantly changes in the mining loop.
%find the target value
% begin the nonce loop
%%compute SHA256(SHA256(block_header))
% if our hash is less than the target value, then we've succeeded.
/mine {
  %block header:
  %version (4 bytes)
  %hashPrevBlock (32 bytes)
  %hashMerkleRoot (32 bytes)
  %time (4 bytes)
  %bits (target) (4 bytes)
  %nonce (4 bytes)
  
  %%%%%%%%%%%%%%%%%%%%%%%
  %% CONSTRUCT HEADER
  %%%%%%%%%%%%%%%%%%%%%%%
  
  %set the values
  
  /target_hash 8 array def
  /i 0 def
  0 1 7 {
    pop
    target_hash i 0 put
    /i i 1 add def
  } for
  
  /bversion 0 def
  /hashPrevBlock 8 array def
  /hashMerkleRoot 8 array def
  /time 0 def
  /bits 0 def
  /nonce_bin 0 def
  /sprev () def
  /smerkle () def
  %now convert them to a string that has the same binary representation
  /bversion bversion convert_bin_to_string def
  /i 0 def
  0 1 7 {
    pop
    /sprev sprev hashPrevBlock i get convert_bin_to_string concatstrings def
    /smerkle smerkle hashMerkleRoot i get convert_bin_to_string concatstrings def
    /i i 1 add def
  } for
  /time time convert_bin_to_string def
  /bits bits convert_bin_to_string def
  
  /block_header bversion sprev concatstrings smerkle concatstrings time concatstrings bits concatstrings def
  
  {
    /nonce nonce_bin convert_bin_to_string def
    /nonce_bin nonce_bin 1 add def
  
    /block_header block_header nonce concatstrings def
    block_header sha256
    /shash () def
    /i 0 def
    0 1 7 {
      pop
      /current exch def
      /shash shash current convert_bin_to_string concatstrings def
    } for
    shash sha256 %now computing SHA256(SHA256(block_header))
    /shash () def
    0 1 7 {
      pop
      /current exch def
      /shash shash current convert_bin_to_string concatstrings def
    } for
    shash sha256 %this is our final hash value
    
    0 index target_hash 0 get lt {
      exit %we found the hash, so exit
    } if
    
    clear
  } loop
  
  
} def

%(C:\\Users\\Nathan\\My Documents\\postscript_bitcoin\\sha256.ps) run
%JS implementation runs in 54.5s
%our implementation runs in 